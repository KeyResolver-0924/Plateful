rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }
    
    // Helper function to check if user is parent of child
    function isParentOfChild(childId) {
      return isAuthenticated() && 
        request.auth.uid in firestore.get(/databases/(default)/documents/children/$(childId)).data.parentIds;
    }
    
    // Helper function to extract child ID from path
    function getChildIdFromPath() {
      return path.segments()[2]; // videos/{childId}/...
    }
    
    // Learning videos - accessible to all authenticated users
    match /videos/learning_modules/{videoPath=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Video thumbnails - accessible to all authenticated users
    match /videos/thumbnails/{thumbnailPath=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Food database images - accessible to all authenticated users
    match /images/food_database/{foodPath=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Meal photos - parents can access their children's photos
    match /images/meal_photos/{childId}/{datePath=**} {
      allow read, write: if isParentOfChild(childId);
      allow read: if isAdmin();
    }
    
    // User avatars - users can access their own avatars
    match /images/avatars/parents/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAdmin();
    }
    
    // Child avatars - parents can access their children's avatars
    match /images/avatars/children/{childId} {
      allow read, write: if isParentOfChild(childId);
      allow read: if isAdmin();
    }
    
    // Audio files - accessible to all authenticated users
    match /audio/{audioPath=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Documents - parents can access their children's documents
    match /documents/reports/{childId}/{reportPath=**} {
      allow read, write: if isParentOfChild(childId);
      allow read: if isAdmin();
    }
    
    // Public documents - accessible to all authenticated users
    match /documents/nutrition_guides/{guidePath=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Certificates - parents can access their children's certificates
    match /documents/certificates/{childId}/{certificatePath=**} {
      allow read, write: if isParentOfChild(childId);
      allow read: if isAdmin();
    }
    
    // File size limits
    function isValidFileSize() {
      return request.resource.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    // Image validation
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') && isValidFileSize();
    }
    
    // Video validation
    function isValidVideo() {
      return request.resource.contentType.matches('video/.*') && isValidFileSize();
    }
    
    // Audio validation
    function isValidAudio() {
      return request.resource.contentType.matches('audio/.*') && request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Apply validation to uploads
    match /{allPaths=**} {
      allow write: if isValidFileSize();
    }
  }
} 